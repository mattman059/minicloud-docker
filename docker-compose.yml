#version: "3.9"

services:
  # === DASHBOARD ===
  dashboard:
    build: ./dashboard
    container_name: docker-dashboard
    working_dir: /app
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8081:8081"
    depends_on:
      - localstack

  # === Control Plane / Cloud API (AWS-like) ===
  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4566:4566"   # LocalStack API Gateway
      - "4571:4571"
    environment:
      - SERVICES=s3,ec2,lambda,dynamodb,cloudwatch,iam,sqs
      - DEBUG=1
    volumes:
      - "./localstack-data:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"

  # === Storage (S3-compatible) ===
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./minio-data:/data

  # === Identity & Access Management ===
  keycloak:
    image: quay.io/keycloak/keycloak:26.0.5
    container_name: keycloak
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"

  # === Secrets Management ===
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - ./vault-data:/vault/file

  # === Networking Simulation (policies like SGs/VPCs) ===
  cilium:
    image: quay.io/cilium/cilium:stable
    container_name: cilium
    privileged: true
    network_mode: host
    command: cilium-agent
    restart: unless-stopped

  # === Monitoring (CloudWatch-like) ===
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus-data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./grafana-data:/var/lib/grafana

  # === Compute Plane (K3s in Docker) ===
  k3d-server:
    image: rancher/k3s:v1.30.0-k3s1
    container_name: k3d-server
    privileged: true
    command:
      - server
      - --disable=traefik
      - --tls-san=127.0.0.1
    environment:
      - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
      - K3S_KUBECONFIG_MODE=666
    volumes:
      - ./k3s-data:/var/lib/rancher/k3s
      - ./k3s-kubeconfig:/output
    ports:
      - "6443:6443"   # Kubernetes API
      - "80:80"       # Simulated LoadBalancer (optional)
      - "443:443"

  k3d-agent:
    image: rancher/k3s:v1.30.0-k3s1
    container_name: k3d-agent
    privileged: true
    command:
      - agent
      - --server=https://k3d-server:6443
    environment:
      - K3S_URL=https://k3d-server:6443
    volumes:
      - ./k3s-data:/var/lib/rancher/k3s
    depends_on:
      - k3d-server

networks:
  default:
    driver: bridge
